{"version":3,"sources":["Time/Time.js","CurrentDate/CurrentDate.js","Description/Description.js","App.js","serviceWorker.js","index.js"],"names":["Time","props","seconds","concat","minutes","hours","react_default","a","createElement","className","Date","day","month","year","dayName","Description","daysName","App","state","time","_this","getTime","date","getDate","getMonth","getFullYear","getDay","getSeconds","getMinutes","getHours","_this2","this","setInterval","setState","CurrentDate_CurrentDate","src_Time_Time","src_Description_Description","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yTAgBeA,eAbF,SAACC,GAEV,IAAMC,EAAUD,EAAMC,QAAU,GAAhB,IAAAC,OAAyBF,EAAMC,SAAYD,EAAMC,QAC3DE,EAAUH,EAAMG,QAAU,GAAhB,IAAAD,OAAyBF,EAAMG,SAAYH,EAAMG,QAC3DC,EAAQJ,EAAMI,MAAQ,GAAd,IAAAF,OAAuBF,EAAMI,OAAUJ,EAAMI,MAE3D,OACIC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACXJ,EADL,IACaD,EADb,IACuBF,KCMhBQ,SAdF,SAACT,GAEV,IAAMU,EAAMV,EAAMU,IAAM,GAAZ,IAAAR,OAAqBF,EAAMU,KAAQV,EAAMU,IAC/CC,EAAQX,EAAMW,MAAQ,GAAd,IAAAT,OAAuBF,EAAMW,OAAUX,EAAMW,MACrDC,EAAOZ,EAAMY,KAAO,GAAb,IAAAV,OAAsBF,EAAMY,MAASZ,EAAMY,KAGxD,OACIP,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACXR,EAAMa,QADX,KACsBH,EADtB,IAC4BC,EAD5B,IACoCC,KCD7BE,SARK,WAChB,OACIT,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAhB,iCCCFO,EAAW,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAwErEC,6MApEbC,MAAQ,CACNC,KAAMC,EAAKC,UACXC,KAAMF,EAAKG,oFAIX,IAAMD,EAAO,IAAIZ,KAEXC,EAAMW,EAAKC,UACXX,EAAQU,EAAKE,WAAa,EAC1BX,EAAOS,EAAKG,cAGlB,MAAO,CACLX,QAHcE,EAASM,EAAKI,UAI5Bf,MACAE,OACAD,2CAKF,IAAMO,EAAO,IAAIT,KAMjB,MAAO,CACLR,QALciB,EAAKQ,aAMnBvB,QALce,EAAKS,aAMnBvB,MALYc,EAAKU,wDASD,IAAAC,EAAAC,KAOlBC,YANuB,WACrBF,EAAKG,SAAS,CACZd,KAAMW,EAAKT,UACXC,KAAMQ,EAAKP,aAGa,sCAI5B,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAEbH,EAAAC,EAAAC,cAAC0B,EAAD,CACEpB,QAASiB,KAAKb,MAAMI,KAAKR,QACzBH,IAAKoB,KAAKb,MAAMI,KAAKX,IACrBE,KAAMkB,KAAKb,MAAMI,KAAKT,KACtBD,MAAOmB,KAAKb,MAAMI,KAAKV,QAGzBN,EAAAC,EAAAC,cAAC2B,EAAD,CACEjC,QAAS6B,KAAKb,MAAMC,KAAKjB,QACzBE,QAAS2B,KAAKb,MAAMC,KAAKf,QACzBC,MAAO0B,KAAKb,MAAMC,KAAKd,QAGzBC,EAAAC,EAAAC,cAAC4B,EAAD,cAhEUC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.db80b8af.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Time.css'\r\n\r\nconst Time = (props) => {\r\n\r\n    const seconds = props.seconds < 10 ? `0${props.seconds}` : props.seconds;\r\n    const minutes = props.minutes < 10 ? `0${props.minutes}` : props.minutes;\r\n    const hours = props.hours < 10 ? `0${props.hours}` : props.hours;\r\n\r\n    return (\r\n        <span className=\"time\">\r\n            {hours}:{minutes}:{seconds}\r\n        </span>\r\n    );\r\n}\r\n\r\nexport default Time;","import React from 'react';\r\nimport './CurrentDate.css'\r\n\r\nconst Date = (props) => {\r\n\r\n    const day = props.day < 10 ? `0${props.day}` : props.day;\r\n    const month = props.month < 10 ? `0${props.month}` : props.month;\r\n    const year = props.year < 10 ? `0${props.year}` : props.year;\r\n\r\n\r\n    return (\r\n        <span className=\"date\">\r\n            {props.dayName}, {day}-{month}-{year}\r\n        </span>\r\n    );\r\n}\r\n\r\nexport default Date;","import React from 'react';\r\nimport './Description.css'\r\n\r\nconst Description = () => {\r\n    return (\r\n        <span className=\"description\">\r\n            Digital clock with React.JS\r\n        </span>\r\n    );\r\n}\r\n\r\nexport default Description;","import React, { Component } from 'react';\nimport './App.css';\nimport Time from './Time/Time'\nimport CurrentDate from './CurrentDate/CurrentDate';\nimport Description from './Description/Description';\n\nconst daysName = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\nclass App extends Component {\n\n  state = {\n    time: this.getTime(),\n    date: this.getDate()\n  }\n\n  getDate() {\n    const date = new Date();\n\n    const day = date.getDate();\n    const month = date.getMonth() + 1;\n    const year = date.getFullYear();\n    const dayName = daysName[date.getDay()];\n\n    return {\n      dayName,\n      day,\n      year,\n      month\n    }\n  }\n\n  getTime() {\n    const time = new Date();\n\n    const seconds = time.getSeconds();\n    const minutes = time.getMinutes();\n    const hours = time.getHours();\n\n    return {\n      seconds,\n      minutes,\n      hours,\n    }\n  }\n\n  componentDidMount() {\n    const setTimeAndDate = () => {\n      this.setState({\n        time: this.getTime(),\n        date: this.getDate()\n      })\n    }\n    setInterval(setTimeAndDate, 1000)\n  }\n\n  render() {\n    return (\n      <div className=\"clock\">\n\n        <CurrentDate\n          dayName={this.state.date.dayName}\n          day={this.state.date.day}\n          year={this.state.date.year}\n          month={this.state.date.month}\n        />\n\n        <Time\n          seconds={this.state.time.seconds}\n          minutes={this.state.time.minutes}\n          hours={this.state.time.hours}\n        />\n\n        <Description />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}